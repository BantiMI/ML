import numpy as np

def f(x):
    return ((np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)))
def df(x):
    return 1 - f(x)**2

W1 = np.array([[0.9, 0.9, 0.9], [0.9, 0.9, 0.9]])
W2 = np.array([0.9, 0.9])

def go(inp):
    sum = np.dot(W1, inp)
    out = np.array([f(x) for x in sum])

    sum2 = np.dot(W2, out)
    y = f(sum2)
    return (y, out)

def train(epoch):
    global W1, W2
    lmd = 0.1
    N = 100000
    count = len(epoch)
    for k in range(N):
        x = epoch[np.random.randint(0, count)]
        y, out = go(x[0:3])
        e = y - x[-1]
        delta = e * df(y)
        W2[0] = W2[0] - lmd * delta * out[0]
        W2[1] = W2[1] - lmd * delta * out[1]

        delta2 = W2 * delta * df(out)

        W1[0, :] = W1[0, :] - np.array(x[0:3]) * delta2[0] * lmd
        W1[1, :] = W1[1, :] - np.array(x[0:3]) * delta2[1] * lmd

epoch = [(-1, -1, -1, -1),
         (-1, -1, 1, 1),
         (-1, 1, -1, -1),
         (-1, 1, 1, 1),
         (1, -1, -1, -1),
         (1, -1, 1, 1),
         (1, 1, -1, -1),
         (1, 1, 1, 1),]

train(epoch)

for x in epoch:
    y, out = go(x[0:3])
    print(y, x[-1])